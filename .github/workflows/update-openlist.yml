name: Auto Update Magisk OpenList

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      needs_update: ${{ steps.check_update.outputs.needs_update }}
      latest_version: ${{ steps.get_release.outputs.tag_name }}
      release_body: ${{ steps.get_release.outputs.body }}
      released: ${{ steps.check_own_release.outputs.released }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest official OpenList release
        id: get_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: "OpenListTeam",
              repo: "OpenList",
            });
            const latest_release = releases.data.find(r => r.prerelease === false);
            if (!latest_release) throw new Error("No official release found");
            core.setOutput("tag_name", latest_release.tag_name);
            core.setOutput("body", latest_release.body);

      - name: Check if update is needed
        id: check_update
        run: |
          CURRENT_VERSION=$(grep '^version=' module.prop | cut -d= -f2)
          LATEST_VERSION="${{ steps.get_release.outputs.tag_name }}"
          echo "Current version: $CURRENT_VERSION, Latest version: $LATEST_VERSION"
          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "needs_update=false" >> $GITHUB_OUTPUT
          else
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Check if release exists in this repo
        id: check_own_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latest_version = '${{ steps.get_release.outputs.tag_name }}';
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            const exists = releases.data.some(r => r.tag_name === latest_version);
            core.setOutput("released", exists ? "true" : "false");

  update:
    needs: check
    if: needs.check.outputs.needs_update == 'true' || needs.check.outputs.released == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Update Version
        if: needs.check.outputs.needs_update == 'true'
        run: |
          VERSION="${{ needs.check.outputs.latest_version }}"
          RELEASE_BODY="${{ needs.check.outputs.release_body }}"
          CURRENT_CODE=$(grep '^versionCode=' module.prop | cut -d= -f2)
          NEW_CODE=$((CURRENT_CODE+1))
          sed -i "s/^version=.*/version=$VERSION/" module.prop
          sed -i "s/^versionCode=.*/versionCode=$NEW_CODE/" module.prop
          for JSON_FILE in update-json/*.json; do
            VARIANT=$(basename "$JSON_FILE" .json)
            ZIP_NAME="magisk-openlist-${VARIANT}-$VERSION.zip"
            sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" "$JSON_FILE"
            sed -i "s/\"versionCode\": [0-9]\+/\"versionCode\": $NEW_CODE/" "$JSON_FILE"
            sed -i "s#\"zipUrl\": \".*\"#\"zipUrl\": \"https://github.com/${GITHUB_REPOSITORY}/releases/download/$VERSION/$ZIP_NAME\"#" "$JSON_FILE"
          done
          TMP_FILE=$(mktemp)
          echo -e "## $VERSION\n\n$RELEASE_BODY\n\n$(cat update.md)" > "$TMP_FILE"
          mv "$TMP_FILE" update.md
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add module.prop update-json/*.json update.md
          git commit -m "Auto update OpenList to $VERSION" || echo "No changes to commit"
          git push
          for JSON_FILE in update-json/*.json; do
            VARIANT=$(basename "$JSON_FILE" .json)
            purge_url="https://purge.jsdelivr.net/gh/$GITHUB_REPOSITORY@$GITHUB_REF_NAME/update-json/${VARIANT}.json"
            echo "Purging: $purge_url"
            response=$(curl -s -w "\nHTTP Status: %{http_code}\n" "$purge_url")
            echo "$response"
          done

      - name: Download and prepare OpenList
        if: needs.check.outputs.released == 'false'
        run: |
          VERSION="${{ needs.check.outputs.latest_version }}"
          mkdir -p tmp system/bin
          for JSON_FILE in update-json/*.json; do
            VARIANT=$(basename "$JSON_FILE" .json)
            TAR_NAME="openlist-android-${VARIANT}.tar.gz"
            URL="https://github.com/OpenListTeam/OpenList/releases/download/$VERSION/$TAR_NAME"
            echo "Downloading $URL"
            mkdir -p tmp/$VARIANT
            curl -L "$URL" -o tmp/$VARIANT/$TAR_NAME
            tar -xzf tmp/$VARIANT/$TAR_NAME -C tmp/$VARIANT
            OPENLIST_PATH=$(find tmp/$VARIANT -type f -name openlist | head -n 1)
            cp "$OPENLIST_PATH" system/bin/openlist
            chmod +x system/bin/openlist
            sed -i "s#^updateJson=.*#updateJson=https://cdn.jsdelivr.net/gh/${GITHUB_REPOSITORY}@main/update-json/${VARIANT}.json#" module.prop
            ZIP_NAME="magisk-openlist-${VARIANT}-$VERSION.zip"
            zip -r "$ZIP_NAME" *.sh system/* META-INF/* module.prop
            mv "$ZIP_NAME" tmp/
            rm -rf system/bin/*
          done

      - name: Create GitHub release
        if: needs.check.outputs.released == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.check.outputs.latest_version }}
          name: ${{ needs.check.outputs.latest_version }}
          body: ${{ needs.check.outputs.release_body }}
          artifacts: tmp/*.zip
          draft: false
          prerelease: false
